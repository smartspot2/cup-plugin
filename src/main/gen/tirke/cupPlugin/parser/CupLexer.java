/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tirke.cupPlugin.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import tirke.cupPlugin.psi.CupTypes;
import static tirke.cupPlugin.psi.CupTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>CupLexer.flex</tt>
 */
public class CupLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int JAVA_CODE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\7\1\4\1\1\22\0\1\3\4\0\1\50\4\0\1\10\1\0\1\14\1\0\1\21\1\6"+
    "\12\5\1\12\1\23\1\15\1\13\1\16\1\22\1\0\32\5\4\0\1\5\1\0\1\26\1\5\1\24\1\34"+
    "\1\30\1\47\1\43\1\46\1\35\1\5\1\42\1\25\1\36\1\33\1\40\1\37\1\5\1\41\1\27"+
    "\1\32\1\44\1\5\1\45\1\31\2\5\1\17\1\11\1\20\7\0\1\7\242\0\2\7\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\1\14\13\3"+
    "\1\1\2\15\1\16\2\0\1\17\1\20\20\3\1\0"+
    "\1\21\1\0\1\22\11\3\1\23\7\3\1\0\1\24"+
    "\1\3\1\25\1\26\1\3\1\27\7\3\1\30\5\3"+
    "\1\31\1\0\1\32\2\3\1\33\1\34\10\3\1\35"+
    "\1\36\1\37\1\40\4\3\1\41\1\3\1\42\1\3"+
    "\1\43\3\3\1\44\1\3\1\45\1\46\5\3\1\47"+
    "\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\122\0\244\0\315\0\122"+
    "\0\122\0\366\0\122\0\122\0\122\0\u011f\0\122\0\122"+
    "\0\122\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\122\0\u0334\0\u035d"+
    "\0\u0386\0\u03af\0\122\0\122\0\u03d8\0\u0401\0\u042a\0\u0453"+
    "\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b"+
    "\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\122\0\u0691\0\122"+
    "\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9"+
    "\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921"+
    "\0\u094a\0\u0973\0\122\0\u099c\0\244\0\244\0\u09c5\0\244"+
    "\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\244"+
    "\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\244\0\u0bda\0\244"+
    "\0\u0c03\0\u0c2c\0\244\0\244\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0"+
    "\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\244\0\122\0\244\0\244"+
    "\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\244\0\u0e41\0\244\0\u0e6a"+
    "\0\244\0\u0e93\0\u0ebc\0\u0ee5\0\244\0\u0f0e\0\244\0\244"+
    "\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\244\0\244";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\3\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\3\1\13\1\14\1\15\1\16\1\3\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\6"+
    "\1\27\1\30\1\6\1\31\1\6\1\32\1\6\1\33"+
    "\3\6\1\34\2\6\1\35\12\36\1\37\36\36\53\0"+
    "\1\5\53\0\1\6\16\0\24\6\7\0\1\40\1\0"+
    "\1\41\52\0\1\42\5\0\1\43\42\0\1\44\43\0"+
    "\1\6\16\0\1\6\1\45\12\6\1\46\7\6\6\0"+
    "\1\6\16\0\4\6\1\47\17\6\6\0\1\6\16\0"+
    "\1\50\23\6\6\0\1\6\16\0\1\51\5\6\1\52"+
    "\11\6\1\53\3\6\6\0\1\6\16\0\5\6\1\54"+
    "\16\6\6\0\1\6\16\0\4\6\1\55\17\6\6\0"+
    "\1\6\16\0\14\6\1\56\7\6\6\0\1\6\16\0"+
    "\7\6\1\57\2\6\1\60\11\6\6\0\1\6\16\0"+
    "\2\6\1\61\12\6\1\62\6\6\6\0\1\6\16\0"+
    "\11\6\1\63\12\6\6\0\1\6\16\0\11\6\1\64"+
    "\12\6\40\0\1\65\31\0\1\66\30\0\1\40\2\0"+
    "\1\40\1\0\2\40\1\0\41\40\10\41\1\67\40\41"+
    "\13\0\1\70\42\0\1\6\16\0\2\6\1\71\21\6"+
    "\6\0\1\6\16\0\10\6\1\72\13\6\6\0\1\6"+
    "\16\0\23\6\1\73\6\0\1\6\16\0\6\6\1\74"+
    "\15\6\6\0\1\6\16\0\2\6\1\75\21\6\6\0"+
    "\1\6\16\0\2\6\1\76\21\6\6\0\1\6\16\0"+
    "\13\6\1\77\10\6\6\0\1\6\16\0\6\6\1\100"+
    "\15\6\6\0\1\6\16\0\15\6\1\101\6\6\6\0"+
    "\1\6\16\0\7\6\1\102\14\6\6\0\1\6\16\0"+
    "\11\6\1\103\12\6\6\0\1\6\16\0\13\6\1\104"+
    "\10\6\6\0\1\6\16\0\1\105\14\6\1\106\6\6"+
    "\6\0\1\6\16\0\4\6\1\107\17\6\6\0\1\6"+
    "\16\0\17\6\1\110\4\6\6\0\1\6\16\0\6\6"+
    "\1\111\15\6\42\0\1\112\7\0\6\41\1\113\1\41"+
    "\1\67\40\41\5\0\1\6\16\0\3\6\1\114\20\6"+
    "\6\0\1\6\16\0\4\6\1\115\17\6\6\0\1\6"+
    "\16\0\6\6\1\116\15\6\6\0\1\6\16\0\11\6"+
    "\1\117\12\6\6\0\1\6\16\0\7\6\1\120\14\6"+
    "\6\0\1\6\16\0\6\6\1\121\6\6\1\122\6\6"+
    "\6\0\1\6\16\0\4\6\1\123\17\6\6\0\1\6"+
    "\16\0\4\6\1\124\17\6\6\0\1\6\16\0\12\6"+
    "\1\125\11\6\6\0\1\6\16\0\2\6\1\126\3\6"+
    "\1\127\15\6\6\0\1\6\16\0\6\6\1\130\15\6"+
    "\6\0\1\6\16\0\14\6\1\131\7\6\6\0\1\6"+
    "\16\0\16\6\1\132\5\6\6\0\1\6\16\0\3\6"+
    "\1\133\20\6\6\0\1\6\16\0\1\134\23\6\6\0"+
    "\1\6\16\0\22\6\1\135\1\6\6\0\1\6\16\0"+
    "\22\6\1\136\1\6\31\0\1\137\25\0\1\6\16\0"+
    "\3\6\1\140\20\6\6\0\1\6\16\0\14\6\1\141"+
    "\7\6\6\0\1\6\16\0\11\6\1\142\12\6\6\0"+
    "\1\6\16\0\6\6\1\143\15\6\6\0\1\6\16\0"+
    "\15\6\1\144\6\6\6\0\1\6\16\0\7\6\1\145"+
    "\14\6\6\0\1\6\16\0\11\6\1\146\12\6\6\0"+
    "\1\6\16\0\3\6\1\147\20\6\6\0\1\6\16\0"+
    "\4\6\1\150\17\6\6\0\1\6\16\0\15\6\1\151"+
    "\6\6\6\0\1\6\16\0\2\6\1\152\21\6\6\0"+
    "\1\6\16\0\4\6\1\153\17\6\6\0\1\6\16\0"+
    "\4\6\1\154\17\6\6\0\1\6\16\0\6\6\1\155"+
    "\15\6\25\0\1\156\31\0\1\6\16\0\7\6\1\157"+
    "\14\6\6\0\1\6\16\0\1\160\23\6\6\0\1\6"+
    "\16\0\10\6\1\161\13\6\6\0\1\6\16\0\7\6"+
    "\1\162\14\6\6\0\1\6\16\0\3\6\1\163\20\6"+
    "\6\0\1\6\16\0\15\6\1\164\6\6\6\0\1\6"+
    "\16\0\6\6\1\165\15\6\6\0\1\6\16\0\17\6"+
    "\1\166\4\6\6\0\1\6\16\0\15\6\1\167\6\6"+
    "\6\0\1\6\16\0\10\6\1\170\13\6\6\0\1\6"+
    "\16\0\3\6\1\171\20\6\6\0\1\6\16\0\2\6"+
    "\1\172\21\6\6\0\1\6\16\0\14\6\1\173\7\6"+
    "\6\0\1\6\16\0\12\6\1\174\11\6\6\0\1\6"+
    "\16\0\4\6\1\175\17\6\6\0\1\6\16\0\4\6"+
    "\1\176\17\6\6\0\1\6\16\0\1\6\1\177\22\6"+
    "\6\0\1\6\16\0\1\200\23\6\6\0\1\6\16\0"+
    "\11\6\1\201\12\6\6\0\1\6\16\0\7\6\1\202"+
    "\14\6\6\0\1\6\16\0\7\6\1\203\14\6\6\0"+
    "\1\6\16\0\1\204\23\6\6\0\1\6\16\0\2\6"+
    "\1\205\21\6\6\0\1\6\16\0\4\6\1\206\17\6"+
    "\6\0\1\6\16\0\1\6\1\207\22\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\2\11\1\1\3\11"+
    "\1\1\3\11\14\1\1\11\2\1\2\0\2\11\20\1"+
    "\1\0\1\11\1\0\1\11\21\1\1\0\1\11\23\1"+
    "\1\0\16\1\1\11\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int postponedMarkedPos = -1;

      public CupLexer() {
        this((java.io.Reader)null);
      }

      private IElementType formJavaCode() {
          zzStartRead = postponedMarkedPos;
          postponedMarkedPos = -1;
          return JAVA;
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CupLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 41: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 43: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 44: break;
          case 5: 
            { return BAR;
            } 
            // fall through
          case 45: break;
          case 6: 
            { return COLON;
            } 
            // fall through
          case 46: break;
          case 7: 
            { return COMMA;
            } 
            // fall through
          case 47: break;
          case 8: 
            { return LEFTI;
            } 
            // fall through
          case 48: break;
          case 9: 
            { return RIGHTI;
            } 
            // fall through
          case 49: break;
          case 10: 
            { return DOT;
            } 
            // fall through
          case 50: break;
          case 11: 
            { return QM;
            } 
            // fall through
          case 51: break;
          case 12: 
            { return SEMI;
            } 
            // fall through
          case 52: break;
          case 13: 
            { 
            } 
            // fall through
          case 53: break;
          case 14: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 54: break;
          case 15: 
            { return RIGHTCUPBRACES;
            } 
            // fall through
          case 55: break;
          case 16: 
            { postponedMarkedPos = zzEndRead;
                         yybegin(JAVA_CODE);
                         return LEFTCUPBRACES;
            } 
            // fall through
          case 56: break;
          case 17: 
            { yybegin(YYINITIAL);
                         yypushback(2);  // leave :} out of code
                         return formJavaCode();
            } 
            // fall through
          case 57: break;
          case 18: 
            { return CCEQ;
            } 
            // fall through
          case 58: break;
          case 19: 
            { return NON;
            } 
            // fall through
          case 59: break;
          case 20: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 60: break;
          case 21: 
            { return CODE;
            } 
            // fall through
          case 61: break;
          case 22: 
            { return LEFT;
            } 
            // fall through
          case 62: break;
          case 23: 
            { return SCAN;
            } 
            // fall through
          case 63: break;
          case 24: 
            { return INIT;
            } 
            // fall through
          case 64: break;
          case 25: 
            { return WITH;
            } 
            // fall through
          case 65: break;
          case 26: 
            { return CLASS;
            } 
            // fall through
          case 66: break;
          case 27: 
            { return START;
            } 
            // fall through
          case 67: break;
          case 28: 
            { return SUPER;
            } 
            // fall through
          case 68: break;
          case 29: 
            { return RIGHT;
            } 
            // fall through
          case 69: break;
          case 30: 
            { return PERCENT_PREC;
            } 
            // fall through
          case 70: break;
          case 31: 
            { return ACTION;
            } 
            // fall through
          case 71: break;
          case 32: 
            { return STATIC;
            } 
            // fall through
          case 72: break;
          case 33: 
            { return IMPORT;
            } 
            // fall through
          case 73: break;
          case 34: 
            { return PARSER;
            } 
            // fall through
          case 74: break;
          case 35: 
            { return EXTENDS;
            } 
            // fall through
          case 75: break;
          case 36: 
            { return PACKAGE;
            } 
            // fall through
          case 76: break;
          case 37: 
            { return TERMINAL;
            } 
            // fall through
          case 77: break;
          case 38: 
            { return NONASSOC;
            } 
            // fall through
          case 78: break;
          case 39: 
            { return PRECED;
            } 
            // fall through
          case 79: break;
          case 40: 
            { return NONTERMINAL;
            } 
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
