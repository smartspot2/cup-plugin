/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tirke.cupPlugin.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static tirke.cupPlugin.psi.CupTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>CupLexer.flex</tt>
 */
public class _CupLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\4\0\1\45\4\0\1\5\1\0\1\11\1\0\1\16\1\4\12\3\1\7\1\20"+
    "\1\12\1\10\1\13\1\17\1\0\1\47\1\56\1\52\1\54\1\55\4\3\1\46\4\3\1\53\6\3\1"+
    "\50\2\3\1\57\1\3\4\0\1\51\1\0\1\23\1\3\1\21\1\31\1\25\1\44\1\40\1\43\1\32"+
    "\1\3\1\37\1\22\1\33\1\30\1\35\1\34\1\3\1\36\1\24\1\27\1\41\1\3\1\42\1\26\2"+
    "\3\1\14\1\6\1\15\7\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57"+
    "\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\1\14\13\3"+
    "\1\1\1\3\1\15\2\0\1\16\1\17\20\3\1\0"+
    "\1\3\1\0\1\20\11\3\1\21\7\3\1\0\1\3"+
    "\1\22\1\3\1\23\1\24\1\3\1\25\7\3\1\26"+
    "\5\3\1\27\1\0\1\3\1\30\2\3\1\31\1\32"+
    "\10\3\1\33\1\34\1\3\1\35\1\36\4\3\1\37"+
    "\1\3\1\40\3\3\1\41\3\3\1\42\3\3\1\43"+
    "\1\44\6\3\1\45\1\46\1\3\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\60\0\60\0\360"+
    "\0\60\0\60\0\60\0\u0120\0\60\0\60\0\60\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\60"+
    "\0\60\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0"+
    "\0\u0720\0\u0750\0\u0780\0\u07b0\0\60\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0"+
    "\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40"+
    "\0\60\0\u0b70\0\220\0\220\0\u0ba0\0\220\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\220\0\u0d20\0\u0d50"+
    "\0\u0d80\0\u0db0\0\u0de0\0\220\0\u0e10\0\u0e40\0\220\0\u0e70"+
    "\0\u0ea0\0\220\0\220\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90"+
    "\0\u0fc0\0\u0ff0\0\u1020\0\220\0\60\0\u1050\0\220\0\220"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\220\0\u1140\0\220\0\u1170"+
    "\0\u11a0\0\u11d0\0\220\0\u1200\0\u1230\0\u1260\0\220\0\u1290"+
    "\0\u12c0\0\u12f0\0\220\0\220\0\u1320\0\u1350\0\u1380\0\u13b0"+
    "\0\u13e0\0\u1410\0\220\0\220\0\u1440\0\220\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\4\1\25\1\26"+
    "\1\4\1\27\1\4\1\30\1\4\1\31\3\4\1\32"+
    "\2\4\1\33\1\34\11\4\61\0\2\3\60\0\1\4"+
    "\15\0\24\4\1\0\12\4\4\0\1\35\1\36\61\0"+
    "\1\37\5\0\1\40\51\0\1\41\53\0\1\4\15\0"+
    "\1\4\1\42\12\4\1\43\7\4\1\0\12\4\3\0"+
    "\1\4\15\0\4\4\1\44\17\4\1\0\12\4\3\0"+
    "\1\4\15\0\1\45\23\4\1\0\12\4\3\0\1\4"+
    "\15\0\1\46\5\4\1\47\11\4\1\50\3\4\1\0"+
    "\12\4\3\0\1\4\15\0\5\4\1\51\16\4\1\0"+
    "\12\4\3\0\1\4\15\0\4\4\1\52\17\4\1\0"+
    "\12\4\3\0\1\4\15\0\14\4\1\53\7\4\1\0"+
    "\12\4\3\0\1\4\15\0\7\4\1\54\2\4\1\55"+
    "\11\4\1\0\12\4\3\0\1\4\15\0\2\4\1\56"+
    "\12\4\1\57\6\4\1\0\12\4\3\0\1\4\15\0"+
    "\11\4\1\60\12\4\1\0\12\4\3\0\1\4\15\0"+
    "\11\4\1\61\12\4\1\0\12\4\34\0\1\62\26\0"+
    "\1\4\15\0\24\4\1\0\1\4\1\63\10\4\1\35"+
    "\1\0\56\35\5\36\1\64\52\36\10\0\1\65\52\0"+
    "\1\4\15\0\2\4\1\66\21\4\1\0\12\4\3\0"+
    "\1\4\15\0\10\4\1\67\13\4\1\0\12\4\3\0"+
    "\1\4\15\0\23\4\1\70\1\0\12\4\3\0\1\4"+
    "\15\0\6\4\1\71\15\4\1\0\12\4\3\0\1\4"+
    "\15\0\2\4\1\72\21\4\1\0\12\4\3\0\1\4"+
    "\15\0\2\4\1\73\21\4\1\0\12\4\3\0\1\4"+
    "\15\0\13\4\1\74\10\4\1\0\12\4\3\0\1\4"+
    "\15\0\6\4\1\75\15\4\1\0\12\4\3\0\1\4"+
    "\15\0\15\4\1\76\6\4\1\0\12\4\3\0\1\4"+
    "\15\0\7\4\1\77\14\4\1\0\12\4\3\0\1\4"+
    "\15\0\11\4\1\100\12\4\1\0\12\4\3\0\1\4"+
    "\15\0\13\4\1\101\10\4\1\0\12\4\3\0\1\4"+
    "\15\0\1\102\14\4\1\103\6\4\1\0\12\4\3\0"+
    "\1\4\15\0\4\4\1\104\17\4\1\0\12\4\3\0"+
    "\1\4\15\0\17\4\1\105\4\4\1\0\12\4\3\0"+
    "\1\4\15\0\6\4\1\106\15\4\1\0\12\4\36\0"+
    "\1\107\24\0\1\4\15\0\24\4\1\0\2\4\1\110"+
    "\7\4\4\36\1\111\1\64\52\36\3\0\1\4\15\0"+
    "\3\4\1\112\20\4\1\0\12\4\3\0\1\4\15\0"+
    "\4\4\1\113\17\4\1\0\12\4\3\0\1\4\15\0"+
    "\6\4\1\114\15\4\1\0\12\4\3\0\1\4\15\0"+
    "\11\4\1\115\12\4\1\0\12\4\3\0\1\4\15\0"+
    "\7\4\1\116\14\4\1\0\12\4\3\0\1\4\15\0"+
    "\6\4\1\117\6\4\1\120\6\4\1\0\12\4\3\0"+
    "\1\4\15\0\4\4\1\121\17\4\1\0\12\4\3\0"+
    "\1\4\15\0\4\4\1\122\17\4\1\0\12\4\3\0"+
    "\1\4\15\0\12\4\1\123\11\4\1\0\12\4\3\0"+
    "\1\4\15\0\2\4\1\124\3\4\1\125\15\4\1\0"+
    "\12\4\3\0\1\4\15\0\6\4\1\126\15\4\1\0"+
    "\12\4\3\0\1\4\15\0\14\4\1\127\7\4\1\0"+
    "\12\4\3\0\1\4\15\0\16\4\1\130\5\4\1\0"+
    "\12\4\3\0\1\4\15\0\3\4\1\131\20\4\1\0"+
    "\12\4\3\0\1\4\15\0\1\132\23\4\1\0\12\4"+
    "\3\0\1\4\15\0\22\4\1\133\1\4\1\0\12\4"+
    "\3\0\1\4\15\0\22\4\1\134\1\4\1\0\12\4"+
    "\25\0\1\135\35\0\1\4\15\0\24\4\1\0\1\4"+
    "\1\136\10\4\3\0\1\4\15\0\3\4\1\137\20\4"+
    "\1\0\12\4\3\0\1\4\15\0\14\4\1\140\7\4"+
    "\1\0\12\4\3\0\1\4\15\0\11\4\1\141\12\4"+
    "\1\0\12\4\3\0\1\4\15\0\6\4\1\142\15\4"+
    "\1\0\12\4\3\0\1\4\15\0\15\4\1\143\6\4"+
    "\1\0\12\4\3\0\1\4\15\0\7\4\1\144\14\4"+
    "\1\0\12\4\3\0\1\4\15\0\11\4\1\145\12\4"+
    "\1\0\12\4\3\0\1\4\15\0\3\4\1\146\20\4"+
    "\1\0\12\4\3\0\1\4\15\0\4\4\1\147\17\4"+
    "\1\0\12\4\3\0\1\4\15\0\15\4\1\150\6\4"+
    "\1\0\12\4\3\0\1\4\15\0\2\4\1\151\21\4"+
    "\1\0\12\4\3\0\1\4\15\0\4\4\1\152\17\4"+
    "\1\0\12\4\3\0\1\4\15\0\4\4\1\153\17\4"+
    "\1\0\12\4\3\0\1\4\15\0\6\4\1\154\15\4"+
    "\1\0\12\4\21\0\1\155\41\0\1\4\15\0\24\4"+
    "\1\0\3\4\1\156\6\4\3\0\1\4\15\0\7\4"+
    "\1\157\14\4\1\0\12\4\3\0\1\4\15\0\1\160"+
    "\23\4\1\0\12\4\3\0\1\4\15\0\10\4\1\161"+
    "\13\4\1\0\12\4\3\0\1\4\15\0\7\4\1\162"+
    "\14\4\1\0\12\4\3\0\1\4\15\0\3\4\1\163"+
    "\20\4\1\0\12\4\3\0\1\4\15\0\15\4\1\164"+
    "\6\4\1\0\12\4\3\0\1\4\15\0\6\4\1\165"+
    "\15\4\1\0\12\4\3\0\1\4\15\0\17\4\1\166"+
    "\4\4\1\0\12\4\3\0\1\4\15\0\15\4\1\167"+
    "\6\4\1\0\12\4\3\0\1\4\15\0\10\4\1\170"+
    "\13\4\1\0\12\4\3\0\1\4\15\0\24\4\1\0"+
    "\4\4\1\171\3\4\1\172\1\4\3\0\1\4\15\0"+
    "\3\4\1\173\20\4\1\0\12\4\3\0\1\4\15\0"+
    "\2\4\1\174\21\4\1\0\12\4\3\0\1\4\15\0"+
    "\14\4\1\175\7\4\1\0\12\4\3\0\1\4\15\0"+
    "\12\4\1\176\11\4\1\0\12\4\3\0\1\4\15\0"+
    "\4\4\1\177\17\4\1\0\12\4\3\0\1\4\15\0"+
    "\4\4\1\200\17\4\1\0\12\4\3\0\1\4\15\0"+
    "\24\4\1\0\5\4\1\201\4\4\3\0\1\4\15\0"+
    "\24\4\1\0\5\4\1\202\4\4\3\0\1\4\15\0"+
    "\1\4\1\203\22\4\1\0\12\4\3\0\1\4\15\0"+
    "\1\204\23\4\1\0\12\4\3\0\1\4\15\0\11\4"+
    "\1\205\12\4\1\0\12\4\3\0\1\4\15\0\7\4"+
    "\1\206\14\4\1\0\12\4\3\0\1\4\15\0\24\4"+
    "\1\0\6\4\1\207\3\4\3\0\1\4\15\0\24\4"+
    "\1\0\6\4\1\210\3\4\3\0\1\4\15\0\7\4"+
    "\1\211\14\4\1\0\12\4\3\0\1\4\15\0\1\212"+
    "\23\4\1\0\12\4\3\0\1\4\15\0\24\4\1\0"+
    "\7\4\1\213\2\4\3\0\1\4\15\0\24\4\1\0"+
    "\11\4\1\214\3\0\1\4\15\0\2\4\1\215\21\4"+
    "\1\0\12\4\3\0\1\4\15\0\4\4\1\216\17\4"+
    "\1\0\12\4\3\0\1\4\15\0\1\4\1\217\22\4"+
    "\1\0\12\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5232];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\3\11\1\1\3\11"+
    "\16\1\2\0\2\11\20\1\1\0\1\1\1\0\1\11"+
    "\21\1\1\0\1\1\1\11\23\1\1\0\17\1\1\11"+
    "\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CupLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CupLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 41: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 43: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 44: break;
          case 5: 
            { return BAR;
            } 
            // fall through
          case 45: break;
          case 6: 
            { return COLON;
            } 
            // fall through
          case 46: break;
          case 7: 
            { return COMMA;
            } 
            // fall through
          case 47: break;
          case 8: 
            { return LEFTI;
            } 
            // fall through
          case 48: break;
          case 9: 
            { return RIGHTI;
            } 
            // fall through
          case 49: break;
          case 10: 
            { return DOT;
            } 
            // fall through
          case 50: break;
          case 11: 
            { return QM;
            } 
            // fall through
          case 51: break;
          case 12: 
            { return SEMI;
            } 
            // fall through
          case 52: break;
          case 13: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 53: break;
          case 14: 
            { return RIGHTCUPBRACES;
            } 
            // fall through
          case 54: break;
          case 15: 
            { return LEFTCUPBRACES;
            } 
            // fall through
          case 55: break;
          case 16: 
            { return CCEQ;
            } 
            // fall through
          case 56: break;
          case 17: 
            { return NON;
            } 
            // fall through
          case 57: break;
          case 18: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 58: break;
          case 19: 
            { return CODE;
            } 
            // fall through
          case 59: break;
          case 20: 
            { return LEFT;
            } 
            // fall through
          case 60: break;
          case 21: 
            { return SCAN;
            } 
            // fall through
          case 61: break;
          case 22: 
            { return INIT;
            } 
            // fall through
          case 62: break;
          case 23: 
            { return WITH;
            } 
            // fall through
          case 63: break;
          case 24: 
            { return CLASS;
            } 
            // fall through
          case 64: break;
          case 25: 
            { return START;
            } 
            // fall through
          case 65: break;
          case 26: 
            { return SUPER;
            } 
            // fall through
          case 66: break;
          case 27: 
            { return RIGHT;
            } 
            // fall through
          case 67: break;
          case 28: 
            { return PERCENT_PREC;
            } 
            // fall through
          case 68: break;
          case 29: 
            { return ACTION;
            } 
            // fall through
          case 69: break;
          case 30: 
            { return STATIC;
            } 
            // fall through
          case 70: break;
          case 31: 
            { return IMPORT;
            } 
            // fall through
          case 71: break;
          case 32: 
            { return PARSER;
            } 
            // fall through
          case 72: break;
          case 33: 
            { return EXTENDS;
            } 
            // fall through
          case 73: break;
          case 34: 
            { return PACKAGE;
            } 
            // fall through
          case 74: break;
          case 35: 
            { return TERMINAL;
            } 
            // fall through
          case 75: break;
          case 36: 
            { return NONASSOC;
            } 
            // fall through
          case 76: break;
          case 37: 
            { return JAVA_CODE;
            } 
            // fall through
          case 77: break;
          case 38: 
            { return JAVA_BODY;
            } 
            // fall through
          case 78: break;
          case 39: 
            { return PRECED;
            } 
            // fall through
          case 79: break;
          case 40: 
            { return NONTERMINAL;
            } 
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
